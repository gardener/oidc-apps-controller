# Default values for oidc-apps-extension.

image:
  repository: europe-docker.pkg.dev/gardener-project/releases/gardener/extensions/oidc-apps-controller
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.1.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Default replicas count for the oidc-apps-controller deployment
replicas: 2

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

certificate:
  # Specifies whether a certificate should be created if cert-manager.io is present in the cluster
  # When false, the oidc-apps-controller creates, rotates and updates the webhook certificates.
  create: false
  # The name of the certificate secret to use.
  # If not set and create is true, a name the name is defaulted to the fullname with "-webhook-tls-cert" suffix
  secretName:

clusterRole:
  # Specifies whether a cluster role should be created
  create: true
  # The name of the cluster role to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 10250
  annotations: {}

resources:
  limits:
    memory: 5Gi
  requests:
    cpu: 1m
    memory: 50Mi

metrics:
  enableScraping: true
  port: 8080

priorityClass:
  # create: false
  # value: 100
  # name: oidc-apps-controller

vpa:
  enabled: true
  updatePolicy:
    updateMode: "Auto"
  #   evictionRequirements:
  #     - resources: ["cpu", "memory"]
  #       changeRequirement: TargetHigherThanRequests
  minAllowed:
    memory: 20Mi
  # maxAllowed:
  #   cpu: 200m
  #   memory: 256Mi
  controlledValues: RequestsOnly

nodeSelector: {}
tolerations: []
affinity: {}

webhook:
  objectSelector: {}
  namespaceSelector: {}

# A selector string following https://pkg.go.dev/k8s.io/apimachinery/pkg/labels@v0.29.2#Parse pattern,
# used to construct the controller-runtime manager cache. An empty string value defaults to the standard
# controller-runtime cache.
cacheSelectorStr:

# OIDC Apps Extension Configuration
# Cluster-wide extension conf
global:
  # OIDC Provider Configuration shared by all targets in the cluster
  # All fields can be overwritten by a concrete target
  oauth2Proxy:
    # OIDC Scope
    scope: "openid email"
    # OIDC client ID shared by all oauth2 proxies in the cluster, shall correspond to the application configuration in the oidc provider
    clientId: ""
    # OIDC client secret shared by all oauth2 proxies in the cluster, shall correspond to the application configuration in the oidc provider
    # Uses PKCE client authentication when not set
    clientSecret: ""
    # OIDC redirect URL shared by all oauth2 proxies in the cluster, shall correspond to the application configuration in the oidc provider
    # Some OIDC providers support wildcards https://*.{{ domainName }}/oauth2/callback
    redirectUrl: ""
    # OIDC provider Url
    # Used as a prefix to .well-known/openid-configuration discovery path
    oidcIssuerUrl: ""
    sslInsecureSkipVerify: false
    insecureOidcSkipIssuerVerification: false
    insecureOidcSkipNonce: false
  kubeRbacProxy:
    # kubeConfig used by kube-rbac-proxy to create SubjectAccessReview authorizing incoming requests
    # A string that will be marshaled to a clientcmd.Config https://pkg.go.dev/k8s.io/client-go/tools/clientcmd/api/v1#Config
    kubeConfigStr: ""
    # A reference to a secret containing kube config for the Kube-RBAC Proxy SubjectAccessReviews target
    # Type corev1.SecretReference https://github.com/kubernetes/api/blob/v0.28.2/core/v1/types.go#L1014
    kubeSecretRef: {} # Ignored if kubeConfig is present
    # If niether of those is provided the kube-rbac-proxy uses the target pod's service account

  # A trusted CA bundle in pem format used to verify the server identity of OIDC
  oidcCABundle: ""
  # A secret with ca.crt key container the trusted CA bundle
  # Type corev1.SecretReference https://github.com/kubernetes/api/blob/v0.28.2/core/v1/types.go#L1014
  oidcCASecretRef: {} # Ignored if oidcCABundle is present
  #Due to https://github.com/brancz/kube-rbac-proxy/issues/259 issue for now either of those two is a mandatory option

  # Adds additional labels to the target pod templates
  labels: {}
  # Adds additional annotations to the target pod templates
  annotations: {} # Adds additional annotations to the target pod templates
  # The domain shared by all targets
  domainName:

targets:
  # Target name
  - name:
    # Target namespace
    # Type metav1.LabelSelector https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#LabelSelector
    namespaceSelector:
    # Target labels
    # Type metav1.LabelSelector https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#LabelSelector
    labelSelector:
    # The final target upstream port, once the request is authenticated and authorized.
    targetPort:
    # The final target upstream protocol (http,https)
    # TODO: the configuration shall support adding trusted CAs for the upstream communication
    targetProtocol:
    # Target ingress entry-point
    ingress:
      create: #false
      # Target URL prefix, to concatenate to the domainName, if not uses the target {{name}}-{{namespace}}
      hostPrefix: ""
      # Target host for the ingress if differ from the {{hostPrefix}} + {{domainName}}
      host:
      # Target ingress annotations for the ingress controller
      # TODO: support nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" as default, to establish https to the oauth2-proxy sidecar
      annotations: {}
      # TLS Secret for front ssl termination
      tlsSecretRef:
      # Optional target oidc configuration.
      # It overwrites the cluster wide {{configuration}}
      configuration:

# In case of Gardener, seeds must configure which client ID to be used the client name.
# They use the annotation key `oidc-apps.extensions.gardener.cloud/client-name`
# where the value is the logical name of the client.
clients:
  # - name: app1 # Logical name of the client.
  #   clientId: 10365f8c-d9ba-44f9-8e85-741e8cc01f9c # clientId shall be the oidc client id configured at the oidc provider
  # - name: app2
  #   clientId : 98a36b69-6592-463a-b605-d4c563f8b016
